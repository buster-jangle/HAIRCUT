/*
  ___   _   _   ___   _   _ _____ ___   _   __
 / _ \ | \ | | / _ \ | \ | |_   _/ _ \ | | / /
/ /_\ \|  \| |/ /_\ \|  \| | | |/ /_\ \| |/ / 
|  _  || . ` ||  _  || . ` | | ||  _  ||    \ 
| | | || |\  || | | || |\  | | || | | || |\  \
\_| |_/\_| \_/\_| |_/\_| \_/ \_/\_| |_/\_| \_/
                                                                       
Project HAIRCUT main.cpp
Initial file automatically generated by PROGENY on 06/21/23 02:40:35
*/

#include "main.h" // include main header
#include "HAIRCUT.h" // include the default library

// include common headers by default
#include "stdio.h"
#include "stdlib.h"
#include <errno.h> // Error integer and strerror() function
#include <unistd.h> // write(), read(), close()
#include <fcntl.h> // Contains file controls like O_RDWR
#include <string>
#include <limits.h>
#include <chrono>
#include "stdbool.h"
#include <iostream>
#include <thread>
#include <mutex>
#include "plog/Log.h"
#include "plog/Initializers/RollingFileInitializer.h"
#include "CLI/App.hpp"
#include "CLI/Formatter.hpp"
#include "CLI/Config.hpp"

using namespace std; // default namespace

int main(int argc, char *argv[]){
    CLI::App cli{"-HAIRCUT application description-"};

    std::string logfilePath = "HAIRCUT.log";
    cli.add_option("-l,--logfile", logfilePath, "Logfile destination. ex: logs/HAIRCUT.log");
    CLI11_PARSE(cli);

    plog::init(plog::info, logfilePath.c_str()); // Initialize the default logger instance.
    PLOGI << "Started logging.";

    HAIRCUT object;
    HAIRCUT object2;
    object.init(plog::info, plog::get()); // Initialize a library with a PLOG appender.
    object2.init(plog::info, plog::get()); // Initialize a library with a PLOG appender.

    object.multiply(1, 2);
    object2.multiply(1, 2);

    cout << "Hello world" << endl;


	while(true){



	}
}





