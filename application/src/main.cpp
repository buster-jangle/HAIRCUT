/*
  ___   _   _   ___   _   _ _____ ___   _   __
 / _ \ | \ | | / _ \ | \ | |_   _/ _ \ | | / /
/ /_\ \|  \| |/ /_\ \|  \| | | |/ /_\ \| |/ / 
|  _  || . ` ||  _  || . ` | | ||  _  ||    \ 
| | | || |\  || | | || |\  | | || | | || |\  \
\_| |_/\_| \_/\_| |_/\_| \_/ \_/\_| |_/\_| \_/
                                                                       
Project HAIRCUT main.cpp
Initial file automatically generated by PROGENY on 06/21/23 02:40:35
*/

#include "main.h" // include main header
#include "HAIRCUT.h" // include the default library

// include common headers by default
#include "stdio.h"
#include "stdlib.h"
#include <errno.h> // Error integer and strerror() function
#include <unistd.h> // write(), read(), close()
#include <fcntl.h> // Contains file controls like O_RDWR
#include <string>
#include <limits.h>
#include <chrono>
#include "stdbool.h"
#include <iostream>
#include <thread>
#include <mutex>
#include "plog/Log.h"
#include "plog/Initializers/RollingFileInitializer.h"
#include "plog/Appenders/ColorConsoleAppender.h"
#include "CLI/App.hpp"
#include "CLI/Formatter.hpp"
#include "CLI/Config.hpp"

#include <fftw.h>
#include "lime/LimeSuite.h"

using namespace std; // default namespace

#define clear() printf("\033[H\033[J")
#define gotoxy(x,y) printf("\033[%d;%dH", (y), (x))

#define MAX_DEVICES 8

float baseFrequency = 904.0e6;
float samplesPerSecond = 0.5e6;
float txGain = 50; // in decibels
int codeLength = 4096;
int interpolationFactor = 1;
uint32_t seed = 0x1BADA551;

typedef struct int16_complex{
    int16_t real;
    int16_t imag;
} int16_complex;


lms_stream_t txStreamGlobal;


int lmsInit(lms_device_t* device);

int main(int argc, char *argv[]) {
    CLI::App cli{"-HAIRCUT: LimeSdr-based transmitter-"};

    std::string logfilePath = "HAIRCUT.log";
    cli.add_option("-l,--logfile", logfilePath, "Logfile destination. ex: logs/HAIRCUT.log");
    CLI11_PARSE(cli);

    static plog::RollingFileAppender<plog::CsvFormatter> fileAppender(logfilePath.c_str(), 8000,3); // Create the 1st appender.
    static plog::ConsoleAppender<plog::TxtFormatter> consoleAppender; // Create the 2nd appender.
    plog::init(plog::verbose, &fileAppender).addAppender(&consoleAppender); // Initialize the logger with the both appenders.    PLOGI << "Started logging.";

//    HAIRCUT object;
//    object.init(plog::info, plog::get()); // Initialize a library with a PLOG appender.

    PLOGI.printf("LimeSuite library version: %s", LMS_GetLibraryVersion());
    PLOGV << "Obtaining available device list";
    lms_info_str_t deviceInfo[MAX_DEVICES]; // Allocate info stype for up to 16 devices
    int devCount = LMS_GetDeviceList(deviceInfo);
    if (devCount < 0) {
        PLOGE << "Failed to get device list";
        return EXIT_FAILURE;
    }
    if (devCount == 0) {
        PLOGE << "No LimeSDR device found";
        return EXIT_FAILURE;
    }
    PLOGI.printf("Devices found: %i",devCount);
    for (int i = 0; i < devCount; ++i)
        PLOGI.printf("\tIndex %i: %s", i, deviceInfo[i]);

    lms_device_t* deviceHandle[MAX_DEVICES];
    for(int i = 0; i < devCount; ++i){
        PLOGI.printf("Opening device %i", i);
        if(LMS_Open(&deviceHandle[i], deviceInfo[i], NULL)) {
            PLOGE.printf("Failed to open device of index %i", i);
            return EXIT_FAILURE;
        }
        else{
            PLOGI.printf("Initializing device %i", i);
            lmsInit(deviceHandle[0]);
        }
    }

    // Generate code sequence as a lookup table
    PLOGI.printf("Generating code sequence of length %i with code %08X...", codeLength, seed);
    srand(seed); /// seed the PRNG
    int16_complex codeSequence[codeLength];
#define MASK_12BIT ((1<<12)-1)
    for(int i = 0; i < codeLength; ++i){
        uint32_t randVal = rand();
        codeSequence->real = randVal & MASK_12BIT;
        codeSequence->imag = randVal & MASK_12BIT;
//        codeSequence[i].real = 2000;
//        codeSequence[i].imag = 2000;
    }
    PLOGI.printf("Done");




    while(true){
        lms_stream_status_t streamStatus;
        if(LMS_GetStreamStatus(&txStreamGlobal, &streamStatus)){
            PLOGE.printf("Failed to get global TX 0 stream status: %s", LMS_GetLastErrorMessage());
            return EXIT_FAILURE;
        }


        clear();
        gotoxy(0, 0);
        printf("TX Stream status:\n");
        if(streamStatus.active)
            printf("\tState: ACTIVE\n");
        else
            printf("\tState: NOT ACTIVE\n");
        printf("\tLink rate:%3.2fMB/S\n", streamStatus.linkRate/(float)(1024*1024));
        printf("\tUnderruns:%i\n", streamStatus.underrun);
        printf("\tOverruns:%i\n", streamStatus.overrun);
        printf("\tDropped packets:%i\n", streamStatus.droppedPackets);
        printf("\tBuffer: %3.1f%\n", 100.0f*(float)streamStatus.fifoFilledCount/(float)streamStatus.fifoSize);

        printf("\r\n");

        int bufferSpace = streamStatus.fifoSize - streamStatus.fifoFilledCount;
//        lms_stream_meta_t streamMetadata;
//        streamMetadata.flushPartialPacket = false;
//        streamMetadata.timestamp = 0;
//        streamMetadata.waitForTimestamp = false;

        while(bufferSpace > codeLength){
            if(LMS_SendStream(&txStreamGlobal, codeSequence, codeLength, nullptr, 1000) != codeLength){
                PLOGE.printf("Failed to send all samples to TX stream: %s", LMS_GetLastErrorMessage());
                return EXIT_FAILURE;
            }
            bufferSpace -= codeLength;
        }

        usleep(20000);
	}
}

int lmsTxChannelInit(lms_device_t* devHandle, int channel){
    /// channel-specific config
    int status = 0;
    status = LMS_EnableChannel(devHandle, LMS_CH_TX, channel, true); // enable tx
    if(status){
        PLOGE.printf("Failed to enable channel CH%i_TX: %s", channel, LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }
    status = LMS_SetLOFrequency(devHandle, LMS_CH_TX, channel, baseFrequency);
    if(status){
        PLOGE.printf("Failed to set LO frequency on CH%i_TX: %s", channel, LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }

    status = LMS_SetAntenna(devHandle, LMS_CH_TX, channel, 1); // set TX to antenna 1 (0 = no path, 1 = TX1, 2 = TX2)
    if(status){
        PLOGE.printf("Failed to set antenna on CH%i_TX: %s", channel, LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }
    status = LMS_SetLPFBW(devHandle, LMS_CH_TX, channel, samplesPerSecond * 1.2); // set the analog lowpass filter bandwidth to samples per second, with a bit of margin
    if(status){
        PLOGE.printf("Failed to set LPF bandwidth on CH%i_TX: %s", channel, LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }
    status = LMS_SetGaindB(devHandle, LMS_CH_TX, channel, txGain);
    if(status){
        PLOGE.printf("Failed to set TX gain on CH%i_TX: %s", channel, LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }

}

int lmsInit(lms_device_t* devHandle){
    int status = 0;
    PLOGI.printf("Initializing...");
    if(LMS_Init(devHandle)){
        PLOGE.printf("Failed to initialize.");
        return EXIT_FAILURE;
    }
    else{
        PLOGI.printf("Initialized.");
    }

    ///// device-wide config
    status = LMS_SetSampleRate(devHandle, samplesPerSecond, 0); // Set samplerate with no oversampling
    if(status){
        PLOGE.printf("Failed to set samplerate: %s", LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }
    // channel specific configs
    lmsTxChannelInit(devHandle, 0); // configure channel 0

    // Configure TX stream for channel 0
    lms_stream_t* txStream = &txStreamGlobal;
    txStream->fifoSize = 1<<16; // 64KSample fifo
    txStream->throughputVsLatency = 0.5; // value is 0 to 1.0. Higher gives better throughput, but more latency.
    txStream->dataFmt = lms_stream_t::LMS_FMT_I12; // data input format is 12-bit data stored in int16
    txStream->linkFmt = lms_stream_t::LMS_LINK_FMT_I12; // Keep link 12-bit, which achievs maximum throughput
    txStream->channel = 0; // associate stream with channel TX 0
    txStream->isTx = true; //^

    status = LMS_SetupStream(devHandle, txStream);
    if(status){
        PLOGE.printf("Failed to set up TX stream: %s", LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }
    status = LMS_StartStream(txStream);
    if(status){
        PLOGE.printf("Failed to start TX stream: %s", LMS_GetLastErrorMessage());
        return EXIT_FAILURE;
    }

    PLOGI.printf("Finished device setup");
}





